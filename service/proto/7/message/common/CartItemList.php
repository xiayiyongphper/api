<?php
namespace service\message\common;

// @@protoc_insertion_point(namespace:.service.message.common.CartItemList)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: common/CartItemList.proto
 *
 * -*- magic methods -*-
 *
 * @method string getProductId()
 * @method void setProductId(\string $value)
 * @method string getName()
 * @method void setName(\string $value)
 * @method string getUrl()
 * @method void setUrl(\string $value)
 * @method string getImage()
 * @method void setImage(\string $value)
 * @method string getPrice()
 * @method void setPrice(\string $value)
 * @method string getOriginalPrice()
 * @method void setOriginalPrice(\string $value)
 * @method string getDiscount()
 * @method void setDiscount(\string $value)
 * @method string getSold()
 * @method void setSold(\string $value)
 * @method string getQty()
 * @method void setQty(\string $value)
 * @method string getSpecification()
 * @method void setSpecification(\string $value)
 * @method string getWholesalerId()
 * @method void setWholesalerId(\string $value)
 * @method string getWholesalerName()
 * @method void setWholesalerName(\string $value)
 * @method string getWholesalerUrl()
 * @method void setWholesalerUrl(\string $value)
 * @method string getNum()
 * @method void setNum(\string $value)
 */
class CartItemList extends \ProtocolBuffers\Message
{
  // @@protoc_insertion_point(traits:.service.message.common.CartItemList)
  
  /**
   * @var string $product_id
   * @tag 1
   * @label required
   * @type \ProtocolBuffers::TYPE_INT64
   **/
  protected $product_id;
  
  /**
   * @var string $name
   * @tag 2
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $name;
  
  /**
   * @var string $url
   * @tag 3
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $url;
  
  /**
   * @var string $image
   * @tag 4
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $image;
  
  /**
   * @var string $price
   * @tag 5
   * @label optional
   * @type \ProtocolBuffers::TYPE_FLOAT
   **/
  protected $price;
  
  /**
   * @var string $original_price
   * @tag 6
   * @label optional
   * @type \ProtocolBuffers::TYPE_FLOAT
   **/
  protected $original_price;
  
  /**
   * @var string $discount
   * @tag 7
   * @label optional
   * @type \ProtocolBuffers::TYPE_FLOAT
   **/
  protected $discount;
  
  /**
   * @var string $sold
   * @tag 8
   * @label optional
   * @type \ProtocolBuffers::TYPE_INT64
   **/
  protected $sold;
  
  /**
   * @var string $qty
   * @tag 9
   * @label optional
   * @type \ProtocolBuffers::TYPE_INT64
   **/
  protected $qty;
  
  /**
   * @var string $specification
   * @tag 10
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $specification;
  
  /**
   * @var string $wholesaler_id
   * @tag 11
   * @label optional
   * @type \ProtocolBuffers::TYPE_INT64
   **/
  protected $wholesaler_id;
  
  /**
   * @var string $wholesaler_name
   * @tag 12
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $wholesaler_name;
  
  /**
   * @var string $wholesaler_url
   * @tag 13
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $wholesaler_url;
  
  /**
   * @var string $num
   * @tag 14
   * @label optional
   * @type \ProtocolBuffers::TYPE_INT64
   **/
  protected $num;
  
  
  // @@protoc_insertion_point(properties_scope:.service.message.common.CartItemList)

  // @@protoc_insertion_point(class_scope:.service.message.common.CartItemList)

  /**
   * get descriptor for protocol buffers
   * 
   * @return \ProtocolBuffersDescriptor
   */
  public static function getDescriptor()
  {
    static $descriptor;
    
    if (!isset($descriptor)) {
      $desc = new \ProtocolBuffers\DescriptorBuilder();
      $desc->addField(1, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_INT64,
        "name"     => "product_id",
        "required" => true,
        "optional" => false,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(2, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "name",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(3, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "url",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(4, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "image",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(5, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_FLOAT,
        "name"     => "price",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(6, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_FLOAT,
        "name"     => "original_price",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(7, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_FLOAT,
        "name"     => "discount",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(8, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_INT64,
        "name"     => "sold",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(9, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_INT64,
        "name"     => "qty",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(10, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "specification",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(11, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_INT64,
        "name"     => "wholesaler_id",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(12, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "wholesaler_name",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(13, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "wholesaler_url",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(14, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_INT64,
        "name"     => "num",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      // @@protoc_insertion_point(builder_scope:.service.message.common.CartItemList)

      $descriptor = $desc->build();
    }
    return $descriptor;
  }

}
